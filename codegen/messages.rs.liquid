// This field is autogenerated by {{ template }}

use wasm_bindgen::prelude::*;
use crate::IntoJs;

{%- for message in messages %}
#[wasm_bindgen(raw_module = "./messages")]
extern "C" {
    #[wasm_bindgen(js_name = {{ message.camelcase_name }})]
    pub type Js{{ message.camelcase_name }};

    #[wasm_bindgen(constructor, js_namespace = messages, js_class = {{ message.camelcase_name }})]
    fn new(
{% for field in message.fields %}
    {{ field.comment | render_comment: "///", 8 }}
    {{ field.snakecase_name }}:
    {%- case field.field_type -%}
    {%- when "Str" -%}
        String,
    {%- when "Byte" -%}
        u8,
    {%- endcase -%}
{% endfor %}
    ) -> Js{{ message.camelcase_name }};
}
{%- endfor %}

#[wasm_bindgen(raw_module = "./messages")]
extern "C" {
    #[wasm_bindgen(js_name = DiagnosticMessage)]
    pub type JsDiagnosticMessage;

    #[wasm_bindgen(constructor, js_class = DiagnosticMessage)]
    fn new(v: JsValue) -> JsDiagnosticMessage;
}
use lib_ruby_parser::DiagnosticMessage as RustDiagnosticMessage;
impl IntoJs for RustDiagnosticMessage {
    type Output = JsDiagnosticMessage;
    fn into_js(self) -> JsDiagnosticMessage {
        match self {
{%- for message in messages %}
            Self::{{ message.camelcase_name }} { {%- for field in message.fields %}{{ field.snakecase_name }}, {%- endfor %} } => {
                JsDiagnosticMessage::from(
                    JsValue::from(
                        Js{{ message.camelcase_name }}::new(
{%- for field in message.fields %}
                            {{ field.snakecase_name }}.into_js(),
{%- endfor %}
                        )
                    )
                )
            },
{%- endfor %}
        }
    }
}
