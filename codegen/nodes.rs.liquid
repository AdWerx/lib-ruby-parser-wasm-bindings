// This file is autogenerated by {{ template }}

use wasm_bindgen::prelude::*;
use crate::{IntoJs, JsLoc};

{%- for node in nodes %}
#[wasm_bindgen(raw_module = "./nodes")]
extern "C" {
    #[wasm_bindgen(js_name = {{ node.camelcase_name }})]
    pub type Js{{ node.camelcase_name }};

    #[wasm_bindgen(constructor, js_namespace = nodes, js_class = {{ node.camelcase_name }})]
    fn new(
{%- for field in node.fields %}
        {{ field.snakecase_name | escape_rust_keyword }}:
        {{- " " -}}
        {%- case field.field_type -%}
        {%- when "Node" -%}
            JsNode
        {%- when "Nodes" -%}
            Vec<JsNode>
        {%- when "MaybeNode" or "RegexpOptions" -%}
            Option<JsNode>
        {%- when "Loc" -%}
            JsLoc
        {%- when "MaybeLoc" -%}
            Option<JsLoc>
        {%- when "Str" or "RawStr" -%}
            String
        {%- when "MaybeStr" or "Chars" -%}
            Option<String>
        {%- when "StringValue" -%}
            Vec<u8>
        {%- when "U8" -%}
            u8
        {%- else -%}
            compile_error!("Unsupported field type {{ field.field_type }}")
        {%- endcase -%},
{%- endfor %}
    ) -> Js{{ node.camelcase_name }};
}

use lib_ruby_parser::nodes::{{ node.camelcase_name }} as Rust{{ node.camelcase_name }};
impl IntoJs for Rust{{ node.camelcase_name }} {
    type Output = Js{{ node.camelcase_name }};
    fn into_js(self) -> Js{{ node.camelcase_name }} {
        Js{{ node.camelcase_name }}::new(
{%- for field in node.fields %}
            self.{{ field.snakecase_name | escape_rust_keyword }}.into_js(),
{%- endfor %}
        )
    }
}
{%- endfor %}

#[wasm_bindgen(raw_module = "./nodes")]
extern "C" {
    #[wasm_bindgen(js_name = Node)]
    pub type JsNode;

    #[wasm_bindgen(constructor, js_class = Node)]
    fn new(v: JsValue) -> JsNode;
}

use lib_ruby_parser::Node as RustNode;
impl IntoJs for RustNode {
    type Output = JsNode;
    fn into_js(self) -> JsNode {
        match self {
{%- for node in nodes %}
            Self::{{ node.camelcase_name }}(inner) => {
                let js_inner: Js{{ node.camelcase_name }} = inner.into_js();
                JsNode::from(JsValue::from(js_inner))
            },
{%- endfor %}
        }
    }
}
